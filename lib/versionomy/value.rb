# -----------------------------------------------------------------------------
# 
# Versionomy value
# 
# -----------------------------------------------------------------------------
# Copyright 2008 Daniel Azuma
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the copyright holder, nor the names of any other
#   contributors to this software, may be used to endorse or promote products
#   derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
;


module Versionomy
  
  
  # === Version number value
  # 
  # A version number value is an ordered list of values, corresponding to an
  # ordered list of fields defined by a schema. For example, if the schema
  # is a simple one of the form "major.minor.tiny", then the the version
  # number "1.4.2" would have the values <tt>[1, 4, 2]</tt> in that order,
  # corresponding to the fields <tt>[:major, :minor, :tiny]</tt>.
  # 
  # Version number values are comparable with other values that have the same
  # form.
  
  class Value
    
    
    def initialize(schema_, values_=nil, parse_params_=nil, subvalue_=nil)  # :nodoc:
      @schema = schema_
      val_ = nil
      case values_
      when Hash
        val_ = values_[@schema.name]
      when Array
        val_ = values_.first
        values_ = values_[1..-1]
      else
        val_ = values_
        values_ = nil
      end
      @value = val_ ? @schema.canonicalize_value(val_) : @schema.initial_value
      @parse_params = parse_params_ || Hash.new
      if subvalue_
        @subvalue = subvalue_
      else
        subschema_ = @schema._subschema(@value)
        @subvalue = subschema_ ? Versionomy::Value._new(subschema_, values_) : nil
      end
    end
    
    
    def inspect  # :nodoc:
      begin
        str_ = unparse
        "#<#{self.class}:0x#{object_id.to_s(16)} #{str_.inspect}>"
      rescue Versionomy::Errors::ParseError
        _inspect
      end
    end
    
    def _inspect  # :nodoc:
      "#<#{self.class}:0x#{object_id.to_s(16)}#{_inspect2}>"
    end
    
    def _inspect2  # :nodoc:
      " #{@schema.name}=#{@value.inspect}#{@subvalue ? @subvalue._inspect2 : ''}"
    end
    
    
    # Returns a string representation generated by unparsing.
    # If unparsing fails, does not raise Versionomy::Errors::ParseError,
    # but instead returns the string generated by +inspect+.
    
    def to_s
      begin
        unparse
      rescue Versionomy::Errors::ParseError
        _inspect
      end
    end
    
    
    # Unparse this version number.
    # 
    # Raises Versionomy::Errors::ParseError if unparsing failed.
    
    def unparse(params_={})
      format_ = @schema.get_format(params_[:format])
      if format_.nil?
        raise Versionomy::Errors::UnknownFormatError
      end
      format_.unparse(@schema, self, params_)
    end
    
    
    # Return the schema defining the form of this version number
    
    def schema
      @schema
    end
    
    
    # Return the parsing parameters for this value.
    
    def parse_params
      @parse_params
    end
    
    
    # Returns an array of recognized field names for this value, in field order.
    def fields
      @subvalue ? @subvalue.fields.unshift(@schema.name) : [@schema.name]
    end
    
    
    # Returns true if this value contains the given field.
    
    def has_field?(symbol_)
      symbol_ = symbol_.to_sym
      if symbol_ == @schema.name
        true
      elsif @subvalue
        @subvalue.has_field?(symbol_)
      else
        false
      end
    end
    
    
    # Returns the value of the given field, or nil if the field is not recognized.
    
    def [](symbol_)
      symbol_ = symbol_ ? symbol_.to_sym : @schema.name
      if symbol_ == @schema.name
        @value
      elsif @subvalue
        @subvalue[symbol_]
      else
        nil
      end
    end
    
    
    # Returns the value as an array of field values, in field order.
    
    def value_array
      @subvalue ? @subvalue.value_array.unshift(@value) : [@value]
    end
    
    
    # Returns the value as a hash of values keyed by field name.
    
    def value_hash
      hash_ = {@schema.name => @value}
      @subvalue ? @subvalue.value_hash.merge(hash_) : hash_
    end
    
    
    # Returns a new version number created by bumping the given field.
    
    def bump(symbol_)
      if (symbol_ == @schema.name)
        bumped_ = @schema.bump_value(@value)
        if bumped_ == @value
          self
        else
          Versionomy::Value._new(@schema, bumped_, @parse_params)
        end
      else
        if @subvalue
          bumped_ = @subvalue.bump(symbol_)
          if @subvalue.equal?(bumped_)
            self
          else
            Versionomy::Value._new(@schema, @value, @parse_params, bumped_)
          end
        else
          self
        end
      end
    end
    
    
    # Returns a new version number created by changing the given field values.
    
    def change(values_={})
      Versionomy::Value._new(@schema, value_hash.merge(values_), @parse_params)
    end
    
    
    def hash  # :nodoc:
      @schema.name.hash ^ @value.hash ^ @subvalue.hash
    end
    
    
    # Returns true if this version number is equal to the given verison number.
    # Equality means the values and field names are the same, although the
    # schemas may actually be different.
    
    def eql?(obj_)
      if obj_.kind_of?(Versionomy::Value)
        if @schema.name != obj_.schema.name || @value != obj_.toplevel_value
          false
        elsif @subvalue
          @subvalue.eql?(obj_.subvalue)
        else
          true
        end
      else
        false
      end
    end
    
    
    # Returns true if this version number is equal to the given verison number.
    # Equality means the values and field names are the same, even if the schemas
    # are different.
    
    def ==(obj_)
      eql?(obj_)
    end
    
    
    # Compare this version number with the given version number.
    # Version numbers with the same field names and types are comparable,
    # even if the schemas are different.
    
    def <=>(obj_)
      if obj_.kind_of?(Versionomy::Value)
        if @schema.name != obj_.schema.name
          nil
        else
          val_ = @schema.compare_values(@value, obj_.toplevel_value)
          if val_ == 0
            if @subvalue.nil?
              obj_.subvalue.nil? ? 0 : nil
            else
              @subvalue <=> obj_.subvalue
            end
          else
            val_
          end
        end
      else
        nil
      end
    end
    
    
    # Compare this version number with the given version number.
    # Version numbers with the same field names and types are comparable,
    # even if the schemas are different.
    
    def <(obj_)
      (self <=> obj_) < 0
    end
    
    
    # Compare this version number with the given version number.
    # Version numbers with the same field names and types are comparable,
    # even if the schemas are different.
    
    def >(obj_)
      (self <=> obj_) > 0
    end
    
    
    # Get the value of the most significant field
    
    def toplevel_value
      @value
    end
    
    
    # Get a value representing all fields except the most significant field
    
    def subvalue
      @subvalue
    end
    
    
    # Field values may be retrieved by calling them as methods.
    
    def method_missing(symbol_)
      self[symbol_] || super
    end
    
    
    class << self
      
      # :stopdoc:
      alias_method :_new, :new
      private :new
      # :startdoc:
      
    end
    
  end
  
  
end
