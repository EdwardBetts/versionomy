{"name":"Versionomy","body":"Versionomy is a generalized version number library. It provides tools to represent, manipulate, parse, and compare version numbers in the wide variety of versioning schemes in use.\r\n\r\n### Some examples\r\n\r\n```ruby\r\nrequire 'versionomy'\r\n\r\n# Create version numbers that understand their own semantics\r\nv1 = Versionomy.create(:major => 1, :minor => 3, :tiny => 2)\r\nv1.major                                 # => 1\r\nv1.minor                                 # => 3\r\nv1.tiny                                  # => 2\r\nv1.release_type                          # => :final\r\nv1.patchlevel                            # => 0\r\n\r\n# Parse version numbers, including common prerelease syntax\r\nv2 = Versionomy.parse('1.4a3')\r\nv2.major                                 # => 1\r\nv2.minor                                 # => 4\r\nv2.tiny                                  # => 0\r\nv2.release_type                          # => :alpha\r\nv2.alpha_version                         # => 3\r\nv2 > v1                                  # => true\r\nv2.to_s                                  # => '1.4a3'\r\n\r\n# Version numbers are semantically self-adjusting.\r\nv3 = Versionomy.parse('1.4.0b2')\r\nv3.major                                 # => 1\r\nv3.minor                                 # => 4\r\nv3.tiny                                  # => 0\r\nv3.release_type                          # => :beta\r\nv3.alpha_version                         # raises NoMethodError\r\nv3.beta_version                          # => 2\r\nv3 > v2                                  # => true\r\nv3.to_s                                  # => '1.4.0b2'\r\n\r\n# You can bump any field\r\nv4 = Versionomy.parse('1.4.0b2').bump(:beta_version)\r\nv4.to_s                                  # => '1.4.0b3'\r\nv5 = v4.bump(:tiny)\r\nv5.to_s                                  # => '1.4.1'\r\n\r\n# Bumping the release type works as you would expect\r\nv6 = Versionomy.parse('1.4.0b2').bump(:release_type)\r\nv6.release_type                          # => :release_candidate\r\nv6.to_s                                  # => '1.4.0rc1'\r\nv7 = v6.bump(:release_type)\r\nv7.release_type                          # => :final\r\nv7.to_s                                  # => '1.4.0'\r\n\r\n# If a version has trailing zeros, it remembers how many fields to\r\n# unparse; however, you can also change this.\r\nv8 = Versionomy.parse('1.4.0b2').bump(:major)\r\nv8.to_s                                  # => '2.0.0'\r\nv8.unparse(:optional_fields => [:tiny])  # => '2.0'\r\nv8.unparse(:required_fields => [:tiny2]) # => '2.0.0.0'\r\n\r\n# Comparisons are semantic, so will behave as expected even if the\r\n# formatting is set up differently.\r\nv9 = Versionomy.parse('2.0.0.0')\r\nv9.to_s                                  # => '2.0.0.0'\r\nv9 == Versionomy.parse('2')              # => true\r\n\r\n# Patchlevels are supported when the release type is :final\r\nv10 = Versionomy.parse('2.0.0').bump(:patchlevel)\r\nv10.patchlevel                           # => 1\r\nv10.to_s                                 # => '2.0.0-1'\r\nv11 = Versionomy.parse('2.0p1')\r\nv11.patchlevel                           # => 1\r\nv11.to_s                                 # => '2.0p1'\r\nv11 == v10                               # => true\r\n\r\n# You can create your own format from scratch or by modifying an\r\n# existing format\r\nmicrosoft_format = Versionomy.default_format.modified_copy do\r\n  field(:minor) do\r\n    recognize_number(:default_value_optional => true,\r\n                     :delimiter_regexp => '\\s?sp',\r\n                     :default_delimiter => ' SP')\r\n  end\r\nend\r\nv12 = microsoft_format.parse('2008 SP2')\r\nv12.major                                # => 2008\r\nv12.minor                                # => 2\r\nv12.tiny                                 # => 0\r\nv12.to_s                                 # => '2008 SP2'\r\nv12 == Versionomy.parse('2008.2')        # => true\r\n```\r\n\r\n### Feature list\r\n\r\nVersionomy's default versioning scheme handles four primary fields (labeled\r\n+major+, +minor+, +tiny+, and +tiny2+). It also supports prerelease versions\r\nsuch as preview, development, alpha, beta, and release candidate. Finally,\r\nit supports patchlevel numbers for released versions.\r\n\r\nVersionomy can compare any two version numbers with compatible structure,\r\nand \"bump\" versions at any level. It supports parsing and unparsing in most\r\ncommonly-used formats, and allows you to extend the parsing to include\r\ncustom formats.\r\n\r\nFinally, Versionomy also lets you to create alternate versioning \"schemas\".\r\nYou can define any number of version number fields, and provide your own\r\nsemantics for comparing, parsing, and modifying version numbers. You can\r\nprovide conversions from one schema to another. As an example, Versionomy\r\nprovides a schema and formatter/parser matching Gem::Version.\r\n\r\n### Installation\r\n\r\n```\r\ngem install versionomy\r\n```\r\n\r\n### For more information\r\n\r\n* See the [documentation](http://dazuma.github.com/versionomy/rdoc)\r\n* Source code on [Github](http://github.com/dazuma/versionomy)\r\n* Report issues [here](http://github.com/dazuma/versionomy/issues)\r\n","tagline":"A generalized version number class for Ruby","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}