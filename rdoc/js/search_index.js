var search_data = {"index":{"searchIndex":["versionomy","conversion","base","parsing","builder","rubygems","semver","errors","circulardescendanterror","conversionerror","conversionredefinederror","formatcreationerror","formatredefinederror","illegalvalueerror","parseerror","rangeoverlaperror","rangespecificationerror","schemacreationerror","schemamismatcherror","symbolredefinederror","typemismatcherror","unknownconversionerror","unknownformaterror","unparseerror","versionomyerror","format","base","delimiter","builder","integerfieldbuilder","mappingsymbolbuilder","stringfieldbuilder","symbolfieldbuilder","rubygems","extramethods","semver","extramethods","standard","extramethods","formats","schema","builder","field","fieldbuilder","wrapper","value","<()","<=>()","==()","==()","===()","===()",">()","[]()","add_child()","add_directory()","add_directory()","add_module()","alias_field()","aliases()","bump()","bump_value()","canonical_name()","canonical_name_for()","canonical_name_for()","canonicalize_value()","change()","compare_values()","compatible_with?()","convert()","convert()","convert_value()","convert_value()","create()","create()","create()","create()","create()","create_rubygems_to_standard()","create_semver_to_standard()","create_standard_to_rubygems()","create_standard_to_semver()","default_format()","default_format=()","default_parse_params()","default_parse_params()","default_unparse_params()","default_unparse_params()","default_value()","default_value()","default_value_for_type()","each_field()","eql?()","eql?()","field()","field()","field()","field_named()","field_names()","format()","get()","get()","get()","has_field?()","inspect()","map()","method_missing()","modified_copy()","modules()","name()","names()","new()","new()","new()","new()","new()","new()","new()","parse()","parse()","parse()","parts()","possible_values()","prerelease?()","prerelease?()","prerelease?()","range()","recognize_letter()","recognize_number()","recognize_regexp()","recognize_regexp()","recognize_regexp_map()","register()","register()","register()","registered?()","registered?()","release()","release()","release()","reset()","root_field()","ruby_version()","rubygems()","rubygems()","schema()","schema()","schema()","semver()","semver()","semver()","standard()","standard()","symbol()","to_bump()","to_bump_type()","to_canonicalize()","to_canonicalize_type()","to_compare()","to_compare_type()","to_generate_parse_params()","to_modify_original_value()","to_modify_string()","to_modify_unparse_params()","to_s()","to_s()","type()","unparse()","unparse()","unparse()","unparse_for_serialization()","unparse_params()","values_array()","values_hash()","version_of()","history","readme","versionomy"],"longSearchIndex":["versionomy","versionomy::conversion","versionomy::conversion::base","versionomy::conversion::parsing","versionomy::conversion::parsing::builder","versionomy::conversion::rubygems","versionomy::conversion::semver","versionomy::errors","versionomy::errors::circulardescendanterror","versionomy::errors::conversionerror","versionomy::errors::conversionredefinederror","versionomy::errors::formatcreationerror","versionomy::errors::formatredefinederror","versionomy::errors::illegalvalueerror","versionomy::errors::parseerror","versionomy::errors::rangeoverlaperror","versionomy::errors::rangespecificationerror","versionomy::errors::schemacreationerror","versionomy::errors::schemamismatcherror","versionomy::errors::symbolredefinederror","versionomy::errors::typemismatcherror","versionomy::errors::unknownconversionerror","versionomy::errors::unknownformaterror","versionomy::errors::unparseerror","versionomy::errors::versionomyerror","versionomy::format","versionomy::format::base","versionomy::format::delimiter","versionomy::format::delimiter::builder","versionomy::format::delimiter::integerfieldbuilder","versionomy::format::delimiter::mappingsymbolbuilder","versionomy::format::delimiter::stringfieldbuilder","versionomy::format::delimiter::symbolfieldbuilder","versionomy::format::rubygems","versionomy::format::rubygems::extramethods","versionomy::format::semver","versionomy::format::semver::extramethods","versionomy::format::standard","versionomy::format::standard::extramethods","versionomy::formats","versionomy::schema","versionomy::schema::builder","versionomy::schema::field","versionomy::schema::fieldbuilder","versionomy::schema::wrapper","versionomy::value","versionomy::value#<()","versionomy::value#<=>()","versionomy::schema::wrapper#==()","versionomy::value#==()","versionomy::format::base#===()","versionomy::schema::wrapper#===()","versionomy::value#>()","versionomy::value#[]()","versionomy::schema::field#add_child()","versionomy::format::add_directory()","versionomy::format::add_directory()","versionomy::schema::builder#add_module()","versionomy::schema::builder#alias_field()","versionomy::schema::wrapper#aliases()","versionomy::value#bump()","versionomy::schema::field#bump_value()","versionomy::schema::wrapper#canonical_name()","versionomy::format::canonical_name_for()","versionomy::format::canonical_name_for()","versionomy::schema::field#canonicalize_value()","versionomy::value#change()","versionomy::schema::field#compare_values()","versionomy::format::semver::extramethods#compatible_with?()","versionomy::conversion::convert()","versionomy::value#convert()","versionomy::conversion::base#convert_value()","versionomy::conversion::parsing#convert_value()","versionomy::create()","versionomy::format::rubygems::create()","versionomy::format::semver::create()","versionomy::format::standard::create()","versionomy::schema::create()","versionomy::conversion::rubygems::create_rubygems_to_standard()","versionomy::conversion::semver::create_semver_to_standard()","versionomy::conversion::rubygems::create_standard_to_rubygems()","versionomy::conversion::semver::create_standard_to_semver()","versionomy::default_format()","versionomy::default_format=()","versionomy::format::delimiter#default_parse_params()","versionomy::format::delimiter::builder#default_parse_params()","versionomy::format::delimiter#default_unparse_params()","versionomy::format::delimiter::builder#default_unparse_params()","versionomy::schema::field#default_value()","versionomy::schema::fieldbuilder#default_value()","versionomy::schema::builder#default_value_for_type()","versionomy::value#each_field()","versionomy::schema::wrapper#eql?()","versionomy::value#eql?()","versionomy::format::delimiter::builder#field()","versionomy::schema::builder#field()","versionomy::schema::fieldbuilder#field()","versionomy::schema::wrapper#field_named()","versionomy::value#field_names()","versionomy::value#format()","versionomy::conversion::get()","versionomy::format::get()","versionomy::format::get()","versionomy::value#has_field?()","versionomy::conversion::base#inspect()","versionomy::format::delimiter::mappingsymbolbuilder#map()","versionomy::value#method_missing()","versionomy::format::delimiter#modified_copy()","versionomy::schema::wrapper#modules()","versionomy::schema::field#name()","versionomy::schema::wrapper#names()","versionomy::conversion::base::new()","versionomy::conversion::parsing::new()","versionomy::format::base::new()","versionomy::format::delimiter::new()","versionomy::schema::field::new()","versionomy::schema::wrapper::new()","versionomy::value::new()","versionomy::parse()","versionomy::format::base#parse()","versionomy::format::delimiter#parse()","versionomy::format::rubygems::extramethods#parts()","versionomy::schema::field#possible_values()","versionomy::format::rubygems::extramethods#prerelease?()","versionomy::format::semver::extramethods#prerelease?()","versionomy::format::standard::extramethods#prerelease?()","versionomy::schema::fieldbuilder#range()","versionomy::format::delimiter::integerfieldbuilder#recognize_letter()","versionomy::format::delimiter::integerfieldbuilder#recognize_number()","versionomy::format::delimiter::stringfieldbuilder#recognize_regexp()","versionomy::format::delimiter::symbolfieldbuilder#recognize_regexp()","versionomy::format::delimiter::symbolfieldbuilder#recognize_regexp_map()","versionomy::conversion::register()","versionomy::format::register()","versionomy::format::register()","versionomy::format::registered?()","versionomy::format::registered?()","versionomy::format::rubygems::extramethods#release()","versionomy::format::semver::extramethods#release()","versionomy::format::standard::extramethods#release()","versionomy::value#reset()","versionomy::schema::wrapper#root_field()","versionomy::ruby_version()","versionomy::format::rubygems()","versionomy::format::rubygems()","versionomy::format::base#schema()","versionomy::format::delimiter#schema()","versionomy::value#schema()","versionomy::semver()","versionomy::format::semver()","versionomy::format::semver()","versionomy::format::standard()","versionomy::format::standard()","versionomy::schema::fieldbuilder#symbol()","versionomy::schema::fieldbuilder#to_bump()","versionomy::schema::builder#to_bump_type()","versionomy::schema::fieldbuilder#to_canonicalize()","versionomy::schema::builder#to_canonicalize_type()","versionomy::schema::fieldbuilder#to_compare()","versionomy::schema::builder#to_compare_type()","versionomy::conversion::parsing::builder#to_generate_parse_params()","versionomy::conversion::parsing::builder#to_modify_original_value()","versionomy::conversion::parsing::builder#to_modify_string()","versionomy::conversion::parsing::builder#to_modify_unparse_params()","versionomy::conversion::base#to_s()","versionomy::value#to_s()","versionomy::schema::field#type()","versionomy::format::base#unparse()","versionomy::format::delimiter#unparse()","versionomy::value#unparse()","versionomy::format::base#unparse_for_serialization()","versionomy::value#unparse_params()","versionomy::value#values_array()","versionomy::value#values_hash()","versionomy::version_of()","","",""],"info":[["Versionomy","","Versionomy.html","","<p>Versionomy\n<p>The Versionomy module contains some convenience methods for creating and\nparsing version numbers. …\n"],["Versionomy::Conversion","","Versionomy/Conversion.html","","<p>Conversion between version schemas.\n<p>Conversions are algorithms for converting from one schema to another. …\n"],["Versionomy::Conversion::Base","","Versionomy/Conversion/Base.html","","<p>The base conversion class.\n<p>This base class defines the API for a conversion. All conversions must\ndefine …\n"],["Versionomy::Conversion::Parsing","","Versionomy/Conversion/Parsing.html","","<p>A conversion strategy that relies on parsing. Essentially, it unparses the\nvalue and then attempts to …\n"],["Versionomy::Conversion::Parsing::Builder","","Versionomy/Conversion/Parsing/Builder.html","","<p>Call methods of this class in the block passed to\nVersionomy::Conversion::Parsing#new to fine-tune the …\n"],["Versionomy::Conversion::Rubygems","","Versionomy/Conversion/Rubygems.html","","<p>This is a namespace for the implementation of the conversion between the\nrubygems and standard formats. …\n"],["Versionomy::Conversion::Semver","","Versionomy/Conversion/Semver.html","","<p>This is a namespace for the implementation of the conversion between the\nsemver and standard formats. …\n"],["Versionomy::Errors","","Versionomy/Errors.html","","<p>This is a namespace for errors that can be thrown by Versionomy.\n"],["Versionomy::Errors::CircularDescendantError","","Versionomy/Errors/CircularDescendantError.html","","<p>This exception is raised during schema creation if you try to create a\ncircular graph.\n"],["Versionomy::Errors::ConversionError","","Versionomy/Errors/ConversionError.html","","<p>Raised when a conversion fails.\n"],["Versionomy::Errors::ConversionRedefinedError","","Versionomy/Errors/ConversionRedefinedError.html","","<p>Raised when you try to register a conversion when one already exists for\nits schemas.\n"],["Versionomy::Errors::FormatCreationError","","Versionomy/Errors/FormatCreationError.html","","<p>Base class for all Versionomy format creation exceptions.\n"],["Versionomy::Errors::FormatRedefinedError","","Versionomy/Errors/FormatRedefinedError.html","","<p>This exception is raised if you try to register a format with a name that\nhas already been used.\n"],["Versionomy::Errors::IllegalValueError","","Versionomy/Errors/IllegalValueError.html","","<p>This exception is raised if you try to set a value that is not allowed by\nthe schema.\n"],["Versionomy::Errors::ParseError","","Versionomy/Errors/ParseError.html","","<p>This exception is raised if parsing failed.\n"],["Versionomy::Errors::RangeOverlapError","","Versionomy/Errors/RangeOverlapError.html","","<p>This exception is raised during schema creation if you try to create two\nfields covering overlapping …\n"],["Versionomy::Errors::RangeSpecificationError","","Versionomy/Errors/RangeSpecificationError.html","","<p>This exception is raised during schema creation if the range specification\ncannot be interpreted.\n"],["Versionomy::Errors::SchemaCreationError","","Versionomy/Errors/SchemaCreationError.html","","<p>Base class for all Versionomy schema creation exceptions\n"],["Versionomy::Errors::SchemaMismatchError","","Versionomy/Errors/SchemaMismatchError.html","","<p>This exception is raised if you try to perform a comparison between\nincompatible schemas.\n"],["Versionomy::Errors::SymbolRedefinedError","","Versionomy/Errors/SymbolRedefinedError.html","","<p>This exception is raised during schema creation if you try to add the same\nsymbol twice to the same symbolic …\n"],["Versionomy::Errors::TypeMismatchError","","Versionomy/Errors/TypeMismatchError.html","","<p>This exception is raised during schema creation if you try to add a symbol\nto a non-symbolic schema. …\n"],["Versionomy::Errors::UnknownConversionError","","Versionomy/Errors/UnknownConversionError.html","","<p>Raised when a conversion fails because no conversion implementation was\nfound.\n"],["Versionomy::Errors::UnknownFormatError","","Versionomy/Errors/UnknownFormatError.html","","<p>Raised by the Format registry if you try to retrieve a format with an\nunrecognized name in strict mode. …\n"],["Versionomy::Errors::UnparseError","","Versionomy/Errors/UnparseError.html","","<p>This exception is raised if unparsing failed.\n"],["Versionomy::Errors::VersionomyError","","Versionomy/Errors/VersionomyError.html","","<p>Base class for all Versionomy exceptions\n"],["Versionomy::Format","","Versionomy/Format.html","","<p>Version number format.\n<p>A format controls the parsing and unparsing of a version number. Any time a\nversion …\n"],["Versionomy::Format::Base","","Versionomy/Format/Base.html","","<p>The base format.\n<p>This format doesn’t actually do anything useful. It causes all strings to\nparse to the …\n"],["Versionomy::Format::Delimiter","","Versionomy/Format/Delimiter.html","","<p>The Delimiter format class provides a DSL for building formats that can\nhandle most cases where the fields …\n"],["Versionomy::Format::Delimiter::Builder","","Versionomy/Format/Delimiter/Builder.html","","<p>This class defines methods that you can call within the DSL block passed to\nVersionomy::Format::Delimiter#new …\n"],["Versionomy::Format::Delimiter::IntegerFieldBuilder","","Versionomy/Format/Delimiter/IntegerFieldBuilder.html","","<p>This class defines methods that can be called from the block passed to\nVersionomy::Format::Delimiter::Builder#field …\n"],["Versionomy::Format::Delimiter::MappingSymbolBuilder","","Versionomy/Format/Delimiter/MappingSymbolBuilder.html","","<p>Methods in this class can be called from the block passed to\nVersionomy::Format::Delimiter::SymbolFieldBuilder#recognize_regexp_map …\n"],["Versionomy::Format::Delimiter::StringFieldBuilder","","Versionomy/Format/Delimiter/StringFieldBuilder.html","","<p>This class defines methods that can be called from the block passed to\nVersionomy::Format::Delimiter::Builder#field …\n"],["Versionomy::Format::Delimiter::SymbolFieldBuilder","","Versionomy/Format/Delimiter/SymbolFieldBuilder.html","","<p>This class defines methods that can be called from the block passed to\nVersionomy::Format::Delimiter::Builder#field …\n"],["Versionomy::Format::Rubygems","","Versionomy/Format/Rubygems.html","","<p>This is a namespace for the implementation of the Rubygems schema and\nformat.\n"],["Versionomy::Format::Rubygems::ExtraMethods","","Versionomy/Format/Rubygems/ExtraMethods.html","","<p>Extra methods added to version values that use the rubygems schema.\n"],["Versionomy::Format::Semver","","Versionomy/Format/Semver.html","","<p>This is a namespace for the implementation of the semver schema and format.\n"],["Versionomy::Format::Semver::ExtraMethods","","Versionomy/Format/Semver/ExtraMethods.html","","<p>Extra methods added to version values that use the semver schema.\n"],["Versionomy::Format::Standard","","Versionomy/Format/Standard.html","","<p>This is a namespace for the implementation of the Standard schema and\nformat.\n"],["Versionomy::Format::Standard::ExtraMethods","","Versionomy/Format/Standard/ExtraMethods.html","","<p>Extra methods added to version values that use the standard schema.\n"],["Versionomy::Formats","","Versionomy/Format.html","","<p>Version number format.\n<p>A format controls the parsing and unparsing of a version number. Any time a\nversion …\n"],["Versionomy::Schema","","Versionomy/Schema.html","","<p>Version number schema.\n<p>A schema defines the structure and semantics of a version number. The\nschema controls …\n"],["Versionomy::Schema::Builder","","Versionomy/Schema/Builder.html","","<p>These methods are available in a schema definition block given to\nVersionomy::Schema#create.\n"],["Versionomy::Schema::Field","","Versionomy/Schema/Field.html","","<p>Objects of this class represent fields in a schema.\n"],["Versionomy::Schema::FieldBuilder","","Versionomy/Schema/FieldBuilder.html","","<p>These methods are available in a schema field definition block.\n"],["Versionomy::Schema::Wrapper","","Versionomy/Schema/Wrapper.html","","<p>Schemas are generally referenced through an object of this class.\n"],["Versionomy::Value","","Versionomy/Value.html","","<p>Version number value\n<p>A version number value is an ordered list of values, corresponding to an\nordered …\n"],["<","Versionomy::Value","Versionomy/Value.html#method-i-3C","(obj_)","<p>Compare this version number with the given version number. The comparison\nmay succeed even if the two …\n"],["<=>","Versionomy::Value","Versionomy/Value.html#method-i-3C-3D-3E","(obj_)","<p>Compare this version number with the given version number, returning 0 if\nthe two are value-equal, a …\n"],["==","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-3D-3D","(obj_)","<p>Returns true if this schema is compatible with the other schema. Two\nschemas are compatible if their …\n"],["==","Versionomy::Value","Versionomy/Value.html#method-i-3D-3D","(obj_)","<p>Returns true if this version number is value-equal to the given number.\nThis type of equality means that …\n"],["===","Versionomy::Format::Base","Versionomy/Format/Base.html#method-i-3D-3D-3D","(obj_)","<p>Determine whether the given value uses this format.\n"],["===","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-3D-3D-3D","(obj_)","<p>If the RHS is a schema, returns true if the schemas are equivalent. If the\nRHS is a value, returns true …\n"],[">","Versionomy::Value","Versionomy/Value.html#method-i-3E","(obj_)","<p>Compare this version number with the given version number. The comparison\nmay succeed even if the two …\n"],["[]","Versionomy::Value","Versionomy/Value.html#method-i-5B-5D","(field_)","<p>Returns the value of the given field, or nil if the field is not\nrecognized. The field may be specified …\n"],["add_child","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-add_child","(child_, ranges_=nil)","<p>Adds the given child field for the given range.\n<p>If you provide a range of nil, adds the given child field …\n"],["add_directory","Versionomy::Format","Versionomy/Format.html#method-c-add_directory","(path_, high_priority_=false)","<p>Add a directory to the format path.\n<p>The format path is an array of directory paths. These directories …\n"],["add_directory","Versionomy::Format","Versionomy/Format.html#method-c-add_directory","(path_, high_priority_=false)","<p>Add a directory to the format path.\n<p>The format path is an array of directory paths. These directories …\n"],["add_module","Versionomy::Schema::Builder","Versionomy/Schema/Builder.html#method-i-add_module","(mod_)","<p>Add a module to the schema. All values that use this schema will include\nthis module. This provides a …\n"],["alias_field","Versionomy::Schema::Builder","Versionomy/Schema/Builder.html#method-i-alias_field","(alias_name_, field_name_)","<p>Create a field alias.\n"],["aliases","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-aliases","()","<p>Returns a hash of field name aliases.\n"],["bump","Versionomy::Value","Versionomy/Value.html#method-i-bump","(field_)","<p>Returns a new version number created by bumping the given field. The field\nmay be specified as a field …\n"],["bump_value","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-bump_value","(value_)","<p>Given a value, bump it to the “next” value. Utilizes a bump procedure if\ngiven; otherwise uses …\n"],["canonical_name","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-canonical_name","(name_)","<p>Return the canonical field name given a name, or nil if the name is not\nrecognized.\n"],["canonical_name_for","Versionomy::Format","Versionomy/Format.html#method-c-canonical_name_for","(format_, strict_=false)","<p>Get the canonical name for the given format, as a string. This is the first\nname the format was registered …\n"],["canonical_name_for","Versionomy::Format","Versionomy/Format.html#method-c-canonical_name_for","(format_, strict_=false)","<p>Get the canonical name for the given format, as a string. This is the first\nname the format was registered …\n"],["canonicalize_value","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-canonicalize_value","(value_)","<p>Given a value, return a “canonical” value for this field. Utilizes a\ncanonicalization procedure …\n"],["change","Versionomy::Value","Versionomy/Value.html#method-i-change","(values_={}, unparse_params_={})","<p>Returns a new version number created by cloning this version number and\nchanging the given field values. …\n"],["compare_values","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-compare_values","(val1_, val2_)","<p>Perform a standard comparison on two values. Returns an integer that may be\npositive, negative, or 0. …\n"],["compatible_with?","Versionomy::Format::Semver::ExtraMethods","Versionomy/Format/Semver/ExtraMethods.html#method-i-compatible_with-3F","(version_)","<p>Returns true if this version is compatible with the given version,\naccording to the Semantic Versioning …\n"],["convert","Versionomy::Conversion","Versionomy/Conversion.html#method-c-convert","(value_, format_, convert_params_=nil)","<p>Convert the given value to the given format. This is identical to calling\n<code>value_.convert(format_, convert_params_</code> …\n"],["convert","Versionomy::Value","Versionomy/Value.html#method-i-convert","(format_, convert_params_=nil)","<p>Attempts to convert this value to the given format, and returns the\nresulting value.\n<p>Raises Versionomy::Errors::ConversionError …\n"],["convert_value","Versionomy::Conversion::Base","Versionomy/Conversion/Base.html#method-i-convert_value","(value_, format_, convert_params_=nil)","<p>Convert the given value to the given format and return the converted value.\n<p>The convert_params may be …\n"],["convert_value","Versionomy::Conversion::Parsing","Versionomy/Conversion/Parsing.html#method-i-convert_value","(value_, format_, convert_params_=nil)","<p>Returns a value equivalent to the given value in the given format.\n<p>The convert_params are passed to this …\n"],["create","Versionomy","Versionomy.html#method-c-create","(values_=nil, format_=nil, unparse_params_=nil)","<p>Create a new version number given a hash or array of values, and an\noptional format.\n<p>The values should …\n"],["create","Versionomy::Format::Rubygems","Versionomy/Format/Rubygems.html#method-c-create","()","<p>Create the rubygems format. This method is called internally when\nVersionomy loads the rubygems format, …\n"],["create","Versionomy::Format::Semver","Versionomy/Format/Semver.html#method-c-create","()","<p>Create the semver format. This method is called internally when Versionomy\nloads the semver format, and …\n"],["create","Versionomy::Format::Standard","Versionomy/Format/Standard.html#method-c-create","()","<p>Create the standard format. This method is called internally when\nVersionomy loads the standard format, …\n"],["create","Versionomy::Schema","Versionomy/Schema.html#method-c-create","(field_=nil, opts_={}, &block_)","<p>Creates a schema. Returns an object of type Versionomy::Schema::Wrapper.\n<p>You may either pass a root field, …\n"],["create_rubygems_to_standard","Versionomy::Conversion::Rubygems","Versionomy/Conversion/Rubygems.html#method-c-create_rubygems_to_standard","()","<p>Create the conversion from rubygems to standard format. This method is\ncalled internally when Versionomy …\n"],["create_semver_to_standard","Versionomy::Conversion::Semver","Versionomy/Conversion/Semver.html#method-c-create_semver_to_standard","()","<p>Create the conversion from semver to standard format. This method is called\ninternally when Versionomy …\n"],["create_standard_to_rubygems","Versionomy::Conversion::Rubygems","Versionomy/Conversion/Rubygems.html#method-c-create_standard_to_rubygems","()","<p>Create the conversion from standard to rubygems format. This method is\ncalled internally when Versionomy …\n"],["create_standard_to_semver","Versionomy::Conversion::Semver","Versionomy/Conversion/Semver.html#method-c-create_standard_to_semver","()","<p>Create the conversion from standard to semver format. This method is called\ninternally when Versionomy …\n"],["default_format","Versionomy","Versionomy.html#method-c-default_format","()","<p>Gets the current default format. Usually this is the “standard” format\nreturned by Versionomy::Format.standard …\n"],["default_format=","Versionomy","Versionomy.html#method-c-default_format-3D","(format_)","<p>Sets the default format used by other methods of this convenience\ninterface. Usually, this is set to …\n"],["default_parse_params","Versionomy::Format::Delimiter","Versionomy/Format/Delimiter.html#method-i-default_parse_params","()","<p>Return a copy of the default parsing parameters used by this format. This\nhash cannot be edited in place. …\n"],["default_parse_params","Versionomy::Format::Delimiter::Builder","Versionomy/Format/Delimiter/Builder.html#method-i-default_parse_params","(params_)","<p>Set or modify the default parameters used when parsing a value.\n"],["default_unparse_params","Versionomy::Format::Delimiter","Versionomy/Format/Delimiter.html#method-i-default_unparse_params","()","<p>Return a copy of the default unparsing parameters used by this format. This\nhash cannot be edited in …\n"],["default_unparse_params","Versionomy::Format::Delimiter::Builder","Versionomy/Format/Delimiter/Builder.html#method-i-default_unparse_params","(params_)","<p>Set or modify the default parameters used when unparsing a value.\n"],["default_value","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-default_value","()","<p>The default value of the field\n"],["default_value","Versionomy::Schema::FieldBuilder","Versionomy/Schema/FieldBuilder.html#method-i-default_value","(value_)","<p>Provide a default value.\n"],["default_value_for_type","Versionomy::Schema::Builder","Versionomy/Schema/Builder.html#method-i-default_value_for_type","(type_, value_)","<p>Provide a default value for the given type. The type should be\n<code>:integer</code>, <code>:string</code>, or <code>:symbol</code>. You\nmust …\n"],["each_field","Versionomy::Value","Versionomy/Value.html#method-i-each_field","()","<p>Iterates over each field, in field order, yielding the field name and\nvalue.\n"],["eql?","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-eql-3F","(obj_)","<p>Returns true if this schema is equivalent to the other schema. Two schemas\nare equivalent if their root …\n"],["eql?","Versionomy::Value","Versionomy/Value.html#method-i-eql-3F","(obj_)","<p>Returns true if this version number is equivalent to the given number. This\ntype of equality means their …\n"],["field","Versionomy::Format::Delimiter::Builder","Versionomy/Format/Delimiter/Builder.html#method-i-field","(name_, opts_={}, &block_)","<p>Specify how to handle a given field. You must pass the name of the field, a\nhash of options, and a block …\n"],["field","Versionomy::Schema::Builder","Versionomy/Schema/Builder.html#method-i-field","(name_, opts_={}, &block_)","<p>Create the root field.\n<p>Recognized options include:\n<p>:type &mdash; Type of field. This should be <code>:integer</code>, <code>:string</code> …\n"],["field","Versionomy::Schema::FieldBuilder","Versionomy/Schema/FieldBuilder.html#method-i-field","(name_, opts_={}, &block_)","<p>Add a child field.\n<p>Recognized options include:\n<p>:only &mdash; The child should be available only for the given values …\n"],["field_named","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-field_named","(name_, include_aliases_=false)","<p>Return the field with the given name, or nil if the given name is not found\nin this schema. If include_aliases_ …\n"],["field_names","Versionomy::Value","Versionomy/Value.html#method-i-field_names","()","<p>Returns an array of recognized field names for this value, in field order.\nThis is the order of the fields …\n"],["format","Versionomy::Value","Versionomy/Value.html#method-i-format","()","<p>Return the format defining the schema and formatting/parsing of this\nversion number.\n"],["get","Versionomy::Conversion","Versionomy/Conversion.html#method-c-get","(from_schema_, to_schema_, strict_=false)","<p>Get a conversion capable of converting between the given schemas.\n<p>The schemas may be specified as format …\n"],["get","Versionomy::Format","Versionomy/Format.html#method-c-get","(name_, strict_=false)","<p>Get the format with the given name.\n<p>If the given name has not been defined, attempts to autoload it from …\n"],["get","Versionomy::Format","Versionomy/Format.html#method-c-get","(name_, strict_=false)","<p>Get the format with the given name.\n<p>If the given name has not been defined, attempts to autoload it from …\n"],["has_field?","Versionomy::Value","Versionomy/Value.html#method-i-has_field-3F","(field_)","<p>Returns true if this value contains the given field, which may be specified\nas a field object, name, …\n"],["inspect","Versionomy::Conversion::Base","Versionomy/Conversion/Base.html#method-i-inspect","()","<p>Inspect this conversion.\n"],["map","Versionomy::Format::Delimiter::MappingSymbolBuilder","Versionomy/Format/Delimiter/MappingSymbolBuilder.html#method-i-map","(value_, representation_, regexp_=nil)","<p>Map a value to a string representation. The optional regexp field, if\nspecified, provides a regular expression …\n"],["method_missing","Versionomy::Value","Versionomy/Value.html#method-i-method_missing","(symbol_)","<p>Field values may be retrieved by calling them as methods.\n"],["modified_copy","Versionomy::Format::Delimiter","Versionomy/Format/Delimiter.html#method-i-modified_copy","(&block_)","<p>Create a copy of this format, with the modifications given in the provided\nblock. You can call methods …\n"],["modules","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-modules","()","<p>Returns an array of modules that should be included in values that use this\nschema.\n"],["name","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-name","()","<p>The name of the field.\n"],["names","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-names","()","<p>Returns an array of names present in this schema, in no particular order.\nDoes not include aliases.\n"],["new","Versionomy::Conversion::Base","Versionomy/Conversion/Base.html#method-c-new","(&block_)","<p>Create a conversion using a simple DSL. You can pass a block to the\ninitializer that takes the same parameters …\n"],["new","Versionomy::Conversion::Parsing","Versionomy/Conversion/Parsing.html#method-c-new","(&block_)","<p>Create a parsing conversion.\n<p>By default, this just unparses and reparses using the default parse\nsettings. …\n"],["new","Versionomy::Format::Base","Versionomy/Format/Base.html#method-c-new","(schema_)","<p>Create an instance of this base format, with the given schema.\n"],["new","Versionomy::Format::Delimiter","Versionomy/Format/Delimiter.html#method-c-new","(schema_, default_opts_={}, &block_)","<p>Create a format using delimiter tools. You should provide the version\nnumber schema, a set of default …\n"],["new","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-c-new","(name_, opts_={}, &block_)","<p>Create a field with the given name.\n<p>Recognized options include:\n<p>:type &mdash; Type of field. This should be <code>:integer</code> …\n"],["new","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-c-new","(field_, modules_=[], aliases_={})","<p>Create a new schema wrapper object given a root field. This is a low-level\nmethod. Usually you should …\n"],["new","Versionomy::Value","Versionomy/Value.html#method-c-new","(values_, format_, unparse_params_=nil)","<p>Create a value, given a hash or array of values, and a format. Both these\nparameters are required.\n<p>The …\n"],["parse","Versionomy","Versionomy.html#method-c-parse","(str_, format_=nil, parse_params_=nil)","<p>Create a new version number given a string to parse, and an optional\nformat.\n<p>The format can be specified …\n"],["parse","Versionomy::Format::Base","Versionomy/Format/Base.html#method-i-parse","(string_, params_=nil)","<p>Parse the given string and return a value.\n<p>The optional parameter hash can be used to pass parameters …\n"],["parse","Versionomy::Format::Delimiter","Versionomy/Format/Delimiter.html#method-i-parse","(string_, params_=nil)","<p>Parse the given string and return a value. This method is required by the\nFormat contract.\n<p>This method …\n"],["parts","Versionomy::Format::Rubygems::ExtraMethods","Versionomy/Format/Rubygems/ExtraMethods.html#method-i-parts","()","<p>Returns a list of the field values, in field order, with trailing zeroes\nstripped off.\n<p>This behaves the …\n"],["possible_values","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-possible_values","()","<p>Returns a list of possible values for this field, if the type is\n<code>:symbol</code>. Returns nil for any other type …\n"],["prerelease?","Versionomy::Format::Rubygems::ExtraMethods","Versionomy/Format/Rubygems/ExtraMethods.html#method-i-prerelease-3F","()","<p>Returns true if the version is a prerelease version– that is, if any of the\nfields is non-numeric.\n<p>This …\n"],["prerelease?","Versionomy::Format::Semver::ExtraMethods","Versionomy/Format/Semver/ExtraMethods.html#method-i-prerelease-3F","()","<p>Returns true if the version is a prerelease version– that is, if the\nprerelease_suffix is nonempty. …\n"],["prerelease?","Versionomy::Format::Standard::ExtraMethods","Versionomy/Format/Standard/ExtraMethods.html#method-i-prerelease-3F","()","<p>Returns true if the version is a prerelease version\n"],["range","Versionomy::Schema::FieldBuilder","Versionomy/Schema/FieldBuilder.html#method-i-range","(first_, last_)","<p>Define a range for the <code>:only</code> parameter to <code>child</code>.\n<p>This creates an object that <code>child</code> interprets like a standard …\n"],["recognize_letter","Versionomy::Format::Delimiter::IntegerFieldBuilder","Versionomy/Format/Delimiter/IntegerFieldBuilder.html#method-i-recognize_letter","(opts_={})","<p>Recognize a letter-formatted integer field. That is, the value is formatted\nas an alphabetic letter where …\n"],["recognize_number","Versionomy::Format::Delimiter::IntegerFieldBuilder","Versionomy/Format/Delimiter/IntegerFieldBuilder.html#method-i-recognize_number","(opts_={})","<p>Recognize a numeric-formatted integer field. Using the opts parameter, you\ncan override any of the field’s …\n"],["recognize_regexp","Versionomy::Format::Delimiter::StringFieldBuilder","Versionomy/Format/Delimiter/StringFieldBuilder.html#method-i-recognize_regexp","(regexp_, opts_={})","<p>Recognize a string field whose value matches a regular expression. The\nregular expression must be passed …\n"],["recognize_regexp","Versionomy::Format::Delimiter::SymbolFieldBuilder","Versionomy/Format/Delimiter/SymbolFieldBuilder.html#method-i-recognize_regexp","(value_, regexp_, canonical_, opts_={}, &block_)","<p>Recognize a symbolic value represented by a particular regular expression.\nThe regular expression must …\n"],["recognize_regexp_map","Versionomy::Format::Delimiter::SymbolFieldBuilder","Versionomy/Format/Delimiter/SymbolFieldBuilder.html#method-i-recognize_regexp_map","(opts_={}, &block_)","<p>Recognize a set of symbolic values, each represented by a particular\nregular expression, but all sharing …\n"],["register","Versionomy::Conversion","Versionomy/Conversion.html#method-c-register","(from_schema_, to_schema_, conversion_, silent_=false)","<p>Register the given conversion as the handler for the given schemas.\n<p>The schemas may be specified as format …\n"],["register","Versionomy::Format","Versionomy/Format.html#method-c-register","(name_, format_, silent_=false)","<p>Register the given format under the given name.\n<p>Valid names may contain only letters, digits, underscores, …\n"],["register","Versionomy::Format","Versionomy/Format.html#method-c-register","(name_, format_, silent_=false)","<p>Register the given format under the given name.\n<p>Valid names may contain only letters, digits, underscores, …\n"],["registered?","Versionomy::Format","Versionomy/Format.html#method-c-registered-3F","(name_)","<p>Determines whether a format with the given name has been registered\nexplicitly. Does not attempt to autoload …\n"],["registered?","Versionomy::Format","Versionomy/Format.html#method-c-registered-3F","(name_)","<p>Determines whether a format with the given name has been registered\nexplicitly. Does not attempt to autoload …\n"],["release","Versionomy::Format::Rubygems::ExtraMethods","Versionomy/Format/Rubygems/ExtraMethods.html#method-i-release","()","<p>Returns the release for this version. For example, converts “1.2.0.a.1” to\n“1.2.0”. …\n"],["release","Versionomy::Format::Semver::ExtraMethods","Versionomy/Format/Semver/ExtraMethods.html#method-i-release","()","<p>Returns the release for this version. For example, converts “1.2.0a1” to\n“1.2.0”. …\n"],["release","Versionomy::Format::Standard::ExtraMethods","Versionomy/Format/Standard/ExtraMethods.html#method-i-release","()","<p>Returns the release for this version. For example, converts “1.2.0a1” to\n“1.2.0”. …\n"],["reset","Versionomy::Value","Versionomy/Value.html#method-i-reset","(field_)","<p>Returns a new version number created by resetting the given field. The\nfield may be specified as a field …\n"],["root_field","Versionomy::Schema::Wrapper","Versionomy/Schema/Wrapper.html#method-i-root_field","()","<p>Returns the root (most significant) field in this schema.\n"],["ruby_version","Versionomy","Versionomy.html#method-c-ruby_version","()","<p>Get the ruby version as a Versionomy::Value, using the builtin constants\nRUBY_VERSION and RUBY_PATCHLEVEL …\n"],["rubygems","Versionomy::Format","Versionomy/Format.html#method-c-rubygems","()","<p>Get the rubygems format. This is identical to calling\n<code>get('rubygems')</code>.\n<p>The rubygems format is designed …\n"],["rubygems","Versionomy::Format","Versionomy/Format.html#method-c-rubygems","()","<p>Get the rubygems format. This is identical to calling\n<code>get('rubygems')</code>.\n<p>The rubygems format is designed …\n"],["schema","Versionomy::Format::Base","Versionomy/Format/Base.html#method-i-schema","()","<p>Returns the schema understood by this format.\n"],["schema","Versionomy::Format::Delimiter","Versionomy/Format/Delimiter.html#method-i-schema","()","<p>Returns the schema understood by this format. This method is required by\nthe Format contract.\n"],["schema","Versionomy::Value","Versionomy/Value.html#method-i-schema","()","<p>Return the schema defining the structure and semantics of this version\nnumber.\n"],["semver","Versionomy","Versionomy.html#method-c-semver","(input_)","<p>Convenience method for creating a version number using the Semantic\nVersioning format (see semver.org/ …\n"],["semver","Versionomy::Format","Versionomy/Format.html#method-c-semver","()","<p>Get the semver format. This is identical to calling\n<code>get('semver')</code>.\n<p>The semver format is designed to conform …\n"],["semver","Versionomy::Format","Versionomy/Format.html#method-c-semver","()","<p>Get the semver format. This is identical to calling\n<code>get('semver')</code>.\n<p>The semver format is designed to conform …\n"],["standard","Versionomy::Format","Versionomy/Format.html#method-c-standard","()","<p>Get the standard format. This is identical to calling\n<code>get('standard')</code>.\n<p>The standard format is designed …\n"],["standard","Versionomy::Format","Versionomy/Format.html#method-c-standard","()","<p>Get the standard format. This is identical to calling\n<code>get('standard')</code>.\n<p>The standard format is designed …\n"],["symbol","Versionomy::Schema::FieldBuilder","Versionomy/Schema/FieldBuilder.html#method-i-symbol","(symbol_, opts_={})","<p>Define the given symbol.\n<p>Recognized options include:\n<p>:bump &mdash; The symbol to transition to when “bump” …\n"],["to_bump","Versionomy::Schema::FieldBuilder","Versionomy/Schema/FieldBuilder.html#method-i-to_bump","(&block_)","<p>Provide a “bump” procedure. The given block should take a value, and return\nthe value to transition …\n"],["to_bump_type","Versionomy::Schema::Builder","Versionomy/Schema/Builder.html#method-i-to_bump_type","(type_, &block_)","<p>Provide a default bump procedure for the given type. The type should be\n<code>:integer</code>, <code>:string</code>, or <code>:symbol</code> …\n"],["to_canonicalize","Versionomy::Schema::FieldBuilder","Versionomy/Schema/FieldBuilder.html#method-i-to_canonicalize","(&block_)","<p>Provide a “canonicalize” procedure. The given block should take a value and\nreturn a canonicalized …\n"],["to_canonicalize_type","Versionomy::Schema::Builder","Versionomy/Schema/Builder.html#method-i-to_canonicalize_type","(type_, &block_)","<p>Provide a default canonicalization procedure for the given type. The type\nshould be <code>:integer</code>, <code>:string</code> …\n"],["to_compare","Versionomy::Schema::FieldBuilder","Versionomy/Schema/FieldBuilder.html#method-i-to_compare","(&block_)","<p>Provide a “compare” procedure. The given block should take two values and\ncompare them. It …\n"],["to_compare_type","Versionomy::Schema::Builder","Versionomy/Schema/Builder.html#method-i-to_compare_type","(type_, &block_)","<p>Provide a default compare procedure for the given type. The type should be\n<code>:integer</code>, <code>:string</code>, or <code>:symbol</code> …\n"],["to_generate_parse_params","Versionomy::Conversion::Parsing::Builder","Versionomy/Conversion/Parsing/Builder.html#method-i-to_generate_parse_params","(&block_)","<p>Provide a block that generates the params used to parse the new value. The\nblock should take one parameter, …\n"],["to_modify_original_value","Versionomy::Conversion::Parsing::Builder","Versionomy/Conversion/Parsing/Builder.html#method-i-to_modify_original_value","(&block_)","<p>Provide a block that can modify the original value prior to it being\nunparsed. The block should take …\n"],["to_modify_string","Versionomy::Conversion::Parsing::Builder","Versionomy/Conversion/Parsing/Builder.html#method-i-to_modify_string","(&block_)","<p>Provide a block that can modify the unparsed string prior to it being\npassed to the parser. The block …\n"],["to_modify_unparse_params","Versionomy::Conversion::Parsing::Builder","Versionomy/Conversion/Parsing/Builder.html#method-i-to_modify_unparse_params","(&block_)","<p>Provide a block that can modify the params used to unparse the old value.\nThe block should take two parameters: …\n"],["to_s","Versionomy::Conversion::Base","Versionomy/Conversion/Base.html#method-i-to_s","()","<p>The default to_s implementation just calls inspect.\n"],["to_s","Versionomy::Value","Versionomy/Value.html#method-i-to_s","()","<p>Returns a string representation generated by unparsing. If unparsing fails,\ndoes not raise Versionomy::Errors::UnparseError …\n"],["type","Versionomy::Schema::Field","Versionomy/Schema/Field.html#method-i-type","()","<p>The type of the field. Possible values are <code>:integer</code>,\n<code>:string</code>, or <code>:symbol</code>.\n"],["unparse","Versionomy::Format::Base","Versionomy/Format/Base.html#method-i-unparse","(value_, params_=nil)","<p>Unparse the given value and return a string.\n<p>The optional parameter hash can be used to pass parameters …\n"],["unparse","Versionomy::Format::Delimiter","Versionomy/Format/Delimiter.html#method-i-unparse","(value_, params_=nil)","<p>Unparse the given value and return a string. This method is required by the\nFormat contract.\n<p>This method …\n"],["unparse","Versionomy::Value","Versionomy/Value.html#method-i-unparse","(params_=nil)","<p>Unparse this version number and return a string.\n<p>Raises Versionomy::Errors::UnparseError if unparsing …\n"],["unparse_for_serialization","Versionomy::Format::Base","Versionomy/Format/Base.html#method-i-unparse_for_serialization","(value_)","<p>An optional method that does unparsing especially for serialization.\nImplement this if normal unparsing …\n"],["unparse_params","Versionomy::Value","Versionomy/Value.html#method-i-unparse_params","()","<p>Return the unparsing parameters for this value. Returns nil if this value\nwas not created using a parser. …\n"],["values_array","Versionomy::Value","Versionomy/Value.html#method-i-values_array","()","<p>Returns the value as an array of field values, in field order. This is the\norder of the fields actually …\n"],["values_hash","Versionomy::Value","Versionomy/Value.html#method-i-values_hash","()","<p>Returns the value as a hash of values keyed by field name.\n"],["version_of","Versionomy","Versionomy.html#method-c-version_of","(mod_)","<p>Get the version of the given module as a Versionomy::Value. Tries a number\nof common approaches to embedding …\n"],["History","","History_rdoc.html","","<p>0.4.4 / 2012-06-27\n<p>Tried to be a little more robust against incomplete psych installations.\n<p>Travis CI integration. …\n"],["README","","README_rdoc.html","","<p>Versionomy\n<p>Versionomy is a generalized version number library. It provides tools to\nrepresent, manipulate, …\n"],["Versionomy","","Versionomy_rdoc.html","","<p>Versionomy\n<p>Versionomy is a generalized version number library. It provides tools to\nrepresent, manipulate, …\n"]]}}